application:
  guides:
    engine:
      installation:
        ember:
          npmHeader: "Installing NPM"
          npmOverview: "Before installing Ember, you'll need Node and the Node Package Manager (NPM). You can think of NPM as an open-source bazaar, where thousands of vendors freely distribute their open-source projects. Using NPM, you'll be able to install these code packages directly into your game, giving it new functionality that you don't have to write yourself. It's because of NPM that the Affinity Engine is able to exist as an ecosystem of modules, rather than as a single monolithic platform."
          npmNvm: "There are several ways to install Node and NPM, but let's do it the *maintainable* way. Node regularly releases new versions, and to make the updating process easier, we should use the Node Version Manager (NVM). NVM allows you to install new versions of Node with a single command, and it will manage these versions so that they don't conflict. To install NVM, [follow this guide](https://github.com/creationix/nvm#install-script)."
          npmInstall: "Once NVM is installed, you can install your first version of Node. Check [this link](https://ember-cli.com/#node) to find out which version of Node to use for best compatibility with Ember CLI. Once you've found the version you need, install it with `nvm install vx.x`. Then run `nvm alias default vx.x`. (In both cases, replacing `x.x` with the Node version number.)"
          remainingDependenciesHeader: "Installing Other Global Dependencies"
          git: "First, let's install [git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git). Git is a source code manager used by millions of open source projects, including Node, Ember, and the Affinity Engine itself. When you create an Affinity Engine game, it automatically uses git, which you can use to keep track of changes to your code base. For instance, if you introduce a bug in a new release of your game, you can use git to compare the old code with the new code. You could even use git to rollback your latest changes. You don't need to understand git to use the Affinity Engine, but you do need to [install it](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git). If you want to learn more about this powerful tool, check out the excellent [Atlassian documentation](https://www.atlassian.com/git/tutorials/)."
          bower: "Next, let's [install Bower](https://bower.io/#install-bower). Like NPM, Bower is a package manager, but with a much smaller ecosystem focused entirely on client-side code. It's easier to use and install than NPM, but both are still necessary. In fact, you need NPM to install Bower."
          emberCLI: "Finally, let's [install Ember CLI](https://ember-cli.com/user-guide/#ember-cli). Ember CLI will help you create new Ember projects, generate Affinity Engine directions, and build sveltly minified code when your game is ready for release."
          emberHeader: "Creating an Ember Project"
          emberOverview: "Now that all our global dependencies are installed, we can create our first Ember project. Simply `ember create my-first-project`. This will create a new directory called `my-first-project` that contains a bare-bones Ember project. This is where your game will come to life."
          emberServer: "Once your game is underway, you can test it locally by running `ember server` in the project directory. This command will prompt Ember CLI to build a copy of the game and serve it to [http://localhost:4200](http://localhost:4200). Simply visit [http://localhost:4200](http://localhost:4200) in your browser to see the game in action. Whenever you save a change to your code, it'll automatically refresh the page for you so you can see the changes in action."
          emberWindowsHeader: "**Windows Users**"
          emberWindows: "If you're using Windows, you'll want to install the [`ember-cli-windows`](https://github.com/felixrieseberg/ember-cli-windows) addon. It'll dramatically improve performance, which can be painfully slow otherwise."
