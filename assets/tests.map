{"version":3,"sources":["affinity-engine-web/tests/affinity-engine/stage/scenes/index/welcome.jshint.js","affinity-engine-web/tests/app.jshint.js","affinity-engine-web/tests/components/doc-version-selector.jshint.js","affinity-engine-web/tests/components/dynamic-tag.jshint.js","affinity-engine-web/tests/components/engine-container.jshint.js","affinity-engine-web/tests/components/expanding-sidebar-section.jshint.js","affinity-engine-web/tests/components/expanding-sidebar.jshint.js","affinity-engine-web/tests/components/header-links.jshint.js","affinity-engine-web/tests/components/m-intl.jshint.js","affinity-engine-web/tests/components/responsive-dropdown.jshint.js","affinity-engine-web/tests/components/responsive-navigation-dropdown.jshint.js","affinity-engine-web/tests/components/section-navigator.jshint.js","affinity-engine-web/tests/controllers/application.jshint.js","affinity-engine-web/tests/formats.jshint.js","affinity-engine-web/tests/helpers/affinity-engine/stage/delay.js","affinity-engine-web/tests/helpers/affinity-engine/stage/register-test-helpers.js","affinity-engine-web/tests/helpers/affinity-engine/stage/step.js","affinity-engine-web/tests/helpers/destroy-app.js","affinity-engine-web/tests/helpers/destroy-app.jshint.js","affinity-engine-web/tests/helpers/ember-basic-dropdown.js","affinity-engine-web/tests/helpers/ember-keyboard/register-test-helpers.js","affinity-engine-web/tests/helpers/ember-power-select.js","affinity-engine-web/tests/helpers/module-for-acceptance.js","affinity-engine-web/tests/helpers/module-for-acceptance.jshint.js","affinity-engine-web/tests/helpers/resolver.js","affinity-engine-web/tests/helpers/resolver.jshint.js","affinity-engine-web/tests/helpers/start-app.js","affinity-engine-web/tests/helpers/start-app.jshint.js","affinity-engine-web/tests/instance-initializers/inject-guides.jshint.js","affinity-engine-web/tests/integration/components/doc-version-selector-test.js","affinity-engine-web/tests/integration/components/doc-version-selector-test.jshint.js","affinity-engine-web/tests/integration/components/dynamic-tag-test.js","affinity-engine-web/tests/integration/components/dynamic-tag-test.jshint.js","affinity-engine-web/tests/integration/components/engine-container-test.js","affinity-engine-web/tests/integration/components/engine-container-test.jshint.js","affinity-engine-web/tests/integration/components/expanding-sidebar-section-test.js","affinity-engine-web/tests/integration/components/expanding-sidebar-section-test.jshint.js","affinity-engine-web/tests/integration/components/expanding-sidebar-test.js","affinity-engine-web/tests/integration/components/expanding-sidebar-test.jshint.js","affinity-engine-web/tests/integration/components/header-links-test.js","affinity-engine-web/tests/integration/components/header-links-test.jshint.js","affinity-engine-web/tests/integration/components/m-intl-test.js","affinity-engine-web/tests/integration/components/m-intl-test.jshint.js","affinity-engine-web/tests/integration/components/responsive-dropdown-test.js","affinity-engine-web/tests/integration/components/responsive-dropdown-test.jshint.js","affinity-engine-web/tests/integration/components/responsive-navigation-dropdown-test.js","affinity-engine-web/tests/integration/components/responsive-navigation-dropdown-test.jshint.js","affinity-engine-web/tests/integration/components/section-navigator-test.js","affinity-engine-web/tests/integration/components/section-navigator-test.jshint.js","affinity-engine-web/tests/mixins/reset-scroll.jshint.js","affinity-engine-web/tests/mixins/route-title.jshint.js","affinity-engine-web/tests/mixins/sidebar-route.jshint.js","affinity-engine-web/tests/resolver.jshint.js","affinity-engine-web/tests/router.jshint.js","affinity-engine-web/tests/routes/application.jshint.js","affinity-engine-web/tests/routes/curtain.jshint.js","affinity-engine-web/tests/routes/engine.jshint.js","affinity-engine-web/tests/routes/engine/components.jshint.js","affinity-engine-web/tests/routes/engine/configuration.jshint.js","affinity-engine-web/tests/routes/engine/configuration/configuration-tiers.jshint.js","affinity-engine-web/tests/routes/engine/configuration/defaults.jshint.js","affinity-engine-web/tests/routes/engine/configuration/index.jshint.js","affinity-engine-web/tests/routes/engine/configuration/usage.jshint.js","affinity-engine-web/tests/routes/engine/fixtures.jshint.js","affinity-engine-web/tests/routes/engine/fixtures/index.jshint.js","affinity-engine-web/tests/routes/engine/installation.jshint.js","affinity-engine-web/tests/routes/engine/installation/affinity-engine.jshint.js","affinity-engine-web/tests/routes/engine/installation/ember.jshint.js","affinity-engine-web/tests/routes/engine/installation/index.jshint.js","affinity-engine-web/tests/routes/engine/installation/quickstarts.jshint.js","affinity-engine-web/tests/routes/engine/installation/tooling.jshint.js","affinity-engine-web/tests/routes/engine/plugins.jshint.js","affinity-engine-web/tests/routes/engine/usage.jshint.js","affinity-engine-web/tests/routes/engine/usage/arguments.jshint.js","affinity-engine-web/tests/routes/engine/usage/basic-routing.jshint.js","affinity-engine-web/tests/routes/engine/usage/block-params.jshint.js","affinity-engine-web/tests/routes/engine/usage/index.jshint.js","affinity-engine-web/tests/routes/index.jshint.js","affinity-engine-web/tests/routes/menu-bar.jshint.js","affinity-engine-web/tests/routes/plugins.jshint.js","affinity-engine-web/tests/routes/stage.jshint.js","affinity-engine-web/tests/routes/welcome.jshint.js","affinity-engine-web/tests/routes/welcome/acknowledgements.jshint.js","affinity-engine-web/tests/routes/welcome/how-to-use-this-documentation.jshint.js","affinity-engine-web/tests/routes/welcome/index.jshint.js","affinity-engine-web/tests/services/doc-version-tracker.jshint.js","affinity-engine-web/tests/services/route-sequencer.jshint.js","affinity-engine-web/tests/test-helper.js","affinity-engine-web/tests/test-helper.jshint.js","affinity-engine-web/tests/transitions.jshint.js","affinity-engine-web/tests/unit/instance-initializers/inject-guides-test.js","affinity-engine-web/tests/unit/instance-initializers/inject-guides-test.jshint.js","affinity-engine-web/tests/unit/mixins/reset-scroll-test.js","affinity-engine-web/tests/unit/mixins/reset-scroll-test.jshint.js","affinity-engine-web/tests/unit/mixins/route-title-test.js","affinity-engine-web/tests/unit/mixins/route-title-test.jshint.js","affinity-engine-web/tests/unit/mixins/sidebar-route-test.js","affinity-engine-web/tests/unit/mixins/sidebar-route-test.jshint.js","affinity-engine-web/tests/unit/routes/engine/fixtures/index-test.js","affinity-engine-web/tests/unit/routes/engine/fixtures/index-test.jshint.js","affinity-engine-web/tests/unit/routes/engine/installation/quickstarts-test.js","affinity-engine-web/tests/unit/routes/engine/installation/quickstarts-test.jshint.js","affinity-engine-web/tests/unit/routes/welcome-test.js","affinity-engine-web/tests/unit/routes/welcome-test.jshint.js","affinity-engine-web/tests/unit/routes/welcome/acknowledgements-test.js","affinity-engine-web/tests/unit/routes/welcome/acknowledgements-test.jshint.js","affinity-engine-web/tests/unit/routes/welcome/how-to-use-this-documentation-test.js","affinity-engine-web/tests/unit/routes/welcome/how-to-use-this-documentation-test.jshint.js","affinity-engine-web/tests/unit/routes/welcome/index-test.js","affinity-engine-web/tests/unit/routes/welcome/index-test.jshint.js","affinity-engine-web/tests/unit/services/doc-version-tracker-test.js","affinity-engine-web/tests/unit/services/doc-version-tracker-test.jshint.js","affinity-engine-web/tests/unit/services/route-sequencer-test.js","affinity-engine-web/tests/unit/services/route-sequencer-test.jshint.js","affinity-engine-web/tests/utils/markdown-it-highlight.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('affinity-engine-web/tests/affinity-engine/stage/scenes/index/welcome.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | affinity-engine/stage/scenes/index/welcome.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'affinity-engine/stage/scenes/index/welcome.js should pass jshint.\\naffinity-engine/stage/scenes/index/welcome.js: line 28, col 32, Missing semicolon.\\naffinity-engine/stage/scenes/index/welcome.js: line 31, col 32, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('affinity-engine-web/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/doc-version-selector.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/doc-version-selector.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/doc-version-selector.js should pass jshint.\\ncomponents/doc-version-selector.js: line 10, col 21, \\'readOnly\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('affinity-engine-web/tests/components/dynamic-tag.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/dynamic-tag.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/dynamic-tag.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/engine-container.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/engine-container.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/engine-container.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/expanding-sidebar-section.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/expanding-sidebar-section.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expanding-sidebar-section.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/expanding-sidebar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/expanding-sidebar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expanding-sidebar.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/header-links.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/header-links.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/header-links.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/m-intl.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/m-intl.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/m-intl.js should pass jshint.\\ncomponents/m-intl.js: line 101, col 36, \\'e\\' is defined but never used.\\ncomponents/m-intl.js: line 112, col 18, \\'args\\' is defined but never used.\\ncomponents/m-intl.js: line 98, col 33, \\'Clipboard\\' is not defined.\\ncomponents/m-intl.js: line 10, col 3, \\'observer\\' is defined but never used.\\ncomponents/m-intl.js: line 15, col 23, \\'SafeString\\' is defined but never used.\\ncomponents/m-intl.js: line 24, col 10, \\'getMatchIndexes\\' is defined but never used.\\ncomponents/m-intl.js: line 35, col 10, \\'stringInsertAt\\' is defined but never used.\\n\\n7 errors');\n  });\n});","define('affinity-engine-web/tests/components/responsive-dropdown.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/responsive-dropdown.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/responsive-dropdown.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/responsive-navigation-dropdown.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/responsive-navigation-dropdown.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/responsive-navigation-dropdown.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/components/section-navigator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/section-navigator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/section-navigator.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/formats.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | formats.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'formats.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/helpers/affinity-engine/stage/delay', ['exports', 'ember'], function (exports, _ember) {\n  var Promise = _ember['default'].RSVP.Promise;\n  var later = _ember['default'].run.later;\n\n  exports['default'] = function (app) {\n    var duration = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n    return new Promise(function (resolve) {\n      later(function () {\n        resolve();\n      }, duration);\n    });\n  };\n});","define('affinity-engine-web/tests/helpers/affinity-engine/stage/register-test-helpers', ['exports', 'ember', 'affinity-engine-web/tests/helpers/affinity-engine/stage/delay', 'affinity-engine-web/tests/helpers/affinity-engine/stage/step'], function (exports, _ember, _affinityEngineWebTestsHelpersAffinityEngineStageDelay, _affinityEngineWebTestsHelpersAffinityEngineStageStep) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('delay', _affinityEngineWebTestsHelpersAffinityEngineStageDelay['default']);\n    _ember['default'].Test.registerAsyncHelper('step', _affinityEngineWebTestsHelpersAffinityEngineStageStep['default']);\n  };\n});","define('affinity-engine-web/tests/helpers/affinity-engine/stage/step', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function (app, duration) {\n    triggerEvent(document, 'keyup', {\n      keyCode: 32,\n      which: 32,\n      altKey: true,\n      ctrlKey: true,\n      shiftKey: true\n    });\n\n    return delay(duration);\n  };\n});","define('affinity-engine-web/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('affinity-engine-web/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/helpers/ember-basic-dropdown', ['exports', 'ember', 'ember-runloop'], function (exports, _ember, _emberRunloop) {\n  exports.nativeClick = nativeClick;\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n  exports.fireKeydown = fireKeydown;\n\n  // integration helpers\n  function focus(el) {\n    if (!el) {\n      return;\n    }\n    var $el = jQuery(el);\n    if ($el.is(':input, [contenteditable=true]')) {\n      var type = $el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        (0, _emberRunloop['default'])(null, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n\n          if (!document.hasFocus || document.hasFocus()) {\n            el.focus();\n          } else {\n            $el.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function nativeClick(selector) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var mousedown = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    var mouseup = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });\n    var click = new window.Event('click', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      mousedown[key] = options[key];\n      mouseup[key] = options[key];\n      click[key] = options[key];\n    });\n    var element = document.querySelector(selector);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mousedown);\n    });\n    focus(element);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mouseup);\n    });\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(click);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeClick(selector, options);\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchEndEvent);\n    });\n  }\n\n  function fireKeydown(selector, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(oEvent);\n    });\n  }\n\n  // acceptance helpers\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('clickDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      clickTrigger(cssPath, options);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('tapDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      tapTrigger(cssPath, options);\n    });\n  };\n});","define('affinity-engine-web/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard'], function (exports, _ember, _emberKeyboard) {\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (['ctrl', 'meta', 'alt', 'shift'].indexOf(attribute) > -1) {\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n});","define('affinity-engine-web/tests/helpers/ember-power-select', ['exports', 'jquery', 'ember-runloop', 'ember-test'], function (exports, _jquery, _emberRunloop, _emberTest) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = (0, _jquery['default'])((0, _jquery['default'])(selector).get(0)); // Only interact with the first result\n    $selector.val(text);\n    var event = document.createEvent('Events');\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = undefined;\n    try {\n      event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    } catch (e) {\n      // fix IE11: \"Object doesn't support this action\"\n      event = document.createEvent('Event');\n      var bubbles = true;\n      var cancelable = true;\n      event.initEvent(eventType, bubbles, cancelable);\n    }\n\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    (0, _emberRunloop['default'])(function () {\n      typeText('.ember-power-select-search-input, .ember-power-select-search input, .ember-power-select-trigger-multiple-input, input[type=\"search\"]', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n    (0, _emberRunloop['default'])(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    _emberTest['default'].registerAsyncHelper('selectChoose', function (app, cssPath, valueOrSelector) {\n      var $trigger = find(cssPath + ' .ember-power-select-trigger');\n\n      if ($trigger === undefined || $trigger.length === 0) {\n        $trigger = find(cssPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-controls');\n      var $content = find('#' + contentId);\n      // If the dropdown is closed, open it\n      if ($content.length === 0) {\n        nativeMouseDown($trigger.get(0));\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = (0, _jquery['default'])('#' + contentId + ' .ember-power-select-option:contains(\"' + valueOrSelector + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length === 0) {\n          // If treating the value as text doesn't gave use any result, let's try if it's a css selector\n          potentialTargets = (0, _jquery['default'])('#' + contentId + ' ' + valueOrSelector).toArray();\n        }\n        if (potentialTargets.length > 1) {\n          target = potentialTargets.filter(function (t) {\n            return t.textContent.trim() === valueOrSelector;\n          })[0] || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        if (!target) {\n          throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but \"' + valueOrSelector + '\" didn\\'t match any option');\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _emberTest['default'].registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var triggerPath = cssPath + ' .ember-power-select-trigger';\n      var $trigger = find(triggerPath);\n      if ($trigger === undefined || $trigger.length === 0) {\n        triggerPath = cssPath;\n        $trigger = find(triggerPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectSearch(\\'' + cssPath + '\\', \\'' + value + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-controls');\n      var isMultipleSelect = (0, _jquery['default'])(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = (0, _jquery['default'])('#' + contentId).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(triggerPath);\n        wait();\n      }\n      var isDefaultSingleSelect = (0, _jquery['default'])('.ember-power-select-search-input').length > 0;\n\n      if (isMultipleSelect) {\n        fillIn(triggerPath + ' .ember-power-select-trigger-multiple-input', value);\n      } else if (isDefaultSingleSelect) {\n        fillIn('.ember-power-select-search-input', value);\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          fillIn(triggerPath + ' input[type=search]', value);\n        } else {\n          fillIn('#' + contentId + ' .ember-power-select-search-input[type=search]', 'input');\n        }\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('affinity-engine-web/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'affinity-engine-web/tests/helpers/start-app', 'affinity-engine-web/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _affinityEngineWebTestsHelpersStartApp, _affinityEngineWebTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _affinityEngineWebTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _affinityEngineWebTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('affinity-engine-web/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/helpers/resolver', ['exports', 'affinity-engine-web/resolver', 'affinity-engine-web/config/environment'], function (exports, _affinityEngineWebResolver, _affinityEngineWebConfigEnvironment) {\n\n  var resolver = _affinityEngineWebResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _affinityEngineWebConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _affinityEngineWebConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('affinity-engine-web/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/helpers/start-app', ['exports', 'ember', 'affinity-engine-web/app', 'affinity-engine-web/config/environment'], function (exports, _ember, _affinityEngineWebApp, _affinityEngineWebConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _affinityEngineWebConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _affinityEngineWebApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('affinity-engine-web/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/instance-initializers/inject-guides.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/inject-guides.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/inject-guides.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/doc-version-selector-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('doc-version-selector', 'Integration | Component | doc version selector', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'doc-version-selector', ['loc', [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'doc-version-selector', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('affinity-engine-web/tests/integration/components/doc-version-selector-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/doc-version-selector-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/doc-version-selector-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/dynamic-tag-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('dynamic-tag', 'Integration | Component | dynamic tag', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'dynamic-tag', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'dynamic-tag', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('affinity-engine-web/tests/integration/components/dynamic-tag-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/dynamic-tag-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dynamic-tag-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/engine-container-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('engine-container', 'Integration | Component | engine container', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'engine-container', ['loc', [null, [1, 0], [1, 20]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'engine-container', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('affinity-engine-web/tests/integration/components/engine-container-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/engine-container-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/engine-container-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/expanding-sidebar-section-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('expanding-sidebar-section', 'Integration | Component | expanding sidebar section', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 29\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'expanding-sidebar-section', ['loc', [null, [1, 0], [1, 29]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('affinity-engine-web/tests/integration/components/expanding-sidebar-section-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/expanding-sidebar-section-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/expanding-sidebar-section-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/expanding-sidebar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('expanding-sidebar', 'Integration | Component | expanding sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'expanding-sidebar', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(true);\n  });\n});","define('affinity-engine-web/tests/integration/components/expanding-sidebar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/expanding-sidebar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/expanding-sidebar-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/header-links-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('header-links', 'Integration | Component | header links', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'header-links', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('affinity-engine-web/tests/integration/components/header-links-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/header-links-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/header-links-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/m-intl-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('m-intl', 'Integration | Component | m intl', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 10\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'm-intl', ['loc', [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'm-intl', [], [], 0, null, ['loc', [null, [2, 4], [4, 15]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('affinity-engine-web/tests/integration/components/m-intl-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/m-intl-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/m-intl-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/responsive-dropdown-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('responsive-dropdown', 'Integration | Component | responsive dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'responsive-dropdown', ['loc', [null, [1, 0], [1, 23]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'responsive-dropdown', [], [], 0, null, ['loc', [null, [2, 4], [4, 28]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('affinity-engine-web/tests/integration/components/responsive-dropdown-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/responsive-dropdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/responsive-dropdown-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/responsive-navigation-dropdown-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('responsive-navigation-dropdown', 'Integration | Component | responsive navigation dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 34\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'responsive-navigation-dropdown', ['loc', [null, [1, 0], [1, 34]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(true);\n  });\n});","define('affinity-engine-web/tests/integration/components/responsive-navigation-dropdown-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/responsive-navigation-dropdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/responsive-navigation-dropdown-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/integration/components/section-navigator-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('section-navigator', 'Integration | Component | section navigator', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'section-navigator', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(true);\n  });\n});","define('affinity-engine-web/tests/integration/components/section-navigator-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/section-navigator-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/section-navigator-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/mixins/reset-scroll.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/reset-scroll.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/reset-scroll.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/mixins/route-title.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/route-title.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/route-title.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/mixins/sidebar-route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/sidebar-route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/sidebar-route.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/curtain.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/curtain.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/curtain.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/components.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/components.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/components.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/configuration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/configuration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/configuration.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/configuration/configuration-tiers.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/configuration/configuration-tiers.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/configuration/configuration-tiers.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/configuration/defaults.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/configuration/defaults.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/configuration/defaults.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/configuration/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/configuration/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/configuration/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/configuration/usage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/configuration/usage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/configuration/usage.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/fixtures.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/fixtures.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/fixtures.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/fixtures/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/fixtures/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/fixtures/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation/affinity-engine.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation/affinity-engine.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation/affinity-engine.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation/ember.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation/ember.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation/ember.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation/quickstarts.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation/quickstarts.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation/quickstarts.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/installation/tooling.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/installation/tooling.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/installation/tooling.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/plugins.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/plugins.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/plugins.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/usage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/usage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/usage.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/usage/arguments.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/usage/arguments.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/usage/arguments.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/usage/basic-routing.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/usage/basic-routing.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/usage/basic-routing.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/usage/block-params.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/usage/block-params.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/usage/block-params.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/engine/usage/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/engine/usage/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/engine/usage/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/menu-bar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/menu-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/menu-bar.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/plugins.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/plugins.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/plugins.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/stage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/stage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/stage.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/welcome.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/welcome.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/welcome.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/welcome/acknowledgements.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/welcome/acknowledgements.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/welcome/acknowledgements.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/welcome/how-to-use-this-documentation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/welcome/how-to-use-this-documentation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/welcome/how-to-use-this-documentation.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/routes/welcome/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/welcome/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/welcome/index.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/services/doc-version-tracker.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/doc-version-tracker.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/doc-version-tracker.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/services/route-sequencer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/route-sequencer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/route-sequencer.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/test-helper', ['exports', 'affinity-engine-web/tests/helpers/resolver', 'ember-qunit'], function (exports, _affinityEngineWebTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_affinityEngineWebTestsHelpersResolver['default']);\n});","define('affinity-engine-web/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/transitions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transitions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/instance-initializers/inject-guides-test', ['exports', 'ember', 'affinity-engine-web/instance-initializers/inject-guides', 'qunit', 'affinity-engine-web/tests/helpers/destroy-app'], function (exports, _ember, _affinityEngineWebInstanceInitializersInjectGuides, _qunit, _affinityEngineWebTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | inject guides', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _affinityEngineWebTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _affinityEngineWebInstanceInitializersInjectGuides.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('affinity-engine-web/tests/unit/instance-initializers/inject-guides-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/inject-guides-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/inject-guides-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/mixins/reset-scroll-test', ['exports', 'ember', 'affinity-engine-web/mixins/reset-scroll', 'qunit'], function (exports, _ember, _affinityEngineWebMixinsResetScroll, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | reset scroll');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var ResetScrollObject = _ember['default'].Object.extend(_affinityEngineWebMixinsResetScroll['default']);\n    var subject = ResetScrollObject.create();\n    assert.ok(subject);\n  });\n});","define('affinity-engine-web/tests/unit/mixins/reset-scroll-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/reset-scroll-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/reset-scroll-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/mixins/route-title-test', ['exports', 'ember', 'affinity-engine-web/mixins/route-title', 'qunit'], function (exports, _ember, _affinityEngineWebMixinsRouteTitle, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | route title');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var RouteTitleObject = _ember['default'].Object.extend(_affinityEngineWebMixinsRouteTitle['default']);\n    var subject = RouteTitleObject.create();\n    assert.ok(subject);\n  });\n});","define('affinity-engine-web/tests/unit/mixins/route-title-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/route-title-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/route-title-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/mixins/sidebar-route-test', ['exports', 'ember', 'affinity-engine-web/mixins/sidebar-route', 'qunit'], function (exports, _ember, _affinityEngineWebMixinsSidebarRoute, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | sidebar route');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var SidebarRouteObject = _ember['default'].Object.extend(_affinityEngineWebMixinsSidebarRoute['default']);\n    var subject = SidebarRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('affinity-engine-web/tests/unit/mixins/sidebar-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/sidebar-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sidebar-route-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/engine/fixtures/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:engine/fixtures/index', 'Unit | Route | engine/fixtures/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/engine/fixtures/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/engine/fixtures/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/engine/fixtures/index-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/engine/installation/quickstarts-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:engine/installation/quickstarts', 'Unit | Route | engine/installation/quickstarts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/engine/installation/quickstarts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/engine/installation/quickstarts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/engine/installation/quickstarts-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome', 'Unit | Route | welcome', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/welcome-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/welcome-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/acknowledgements-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome/acknowledgements', 'Unit | Route | welcome/acknowledgements', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/acknowledgements-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/welcome/acknowledgements-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/welcome/acknowledgements-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/how-to-use-this-documentation-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome/how-to-use-this-documentation', 'Unit | Route | welcome/how to use this documentation', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/how-to-use-this-documentation-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/welcome/how-to-use-this-documentation-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/welcome/how-to-use-this-documentation-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome/index', 'Unit | Route | welcome/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('affinity-engine-web/tests/unit/routes/welcome/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/welcome/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/welcome/index-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/services/doc-version-tracker-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:doc-version-tracker', 'Unit | Service | doc version tracker', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('affinity-engine-web/tests/unit/services/doc-version-tracker-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/doc-version-tracker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/doc-version-tracker-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/unit/services/route-sequencer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:route-sequencer', 'Unit | Service | route sequencer', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('affinity-engine-web/tests/unit/services/route-sequencer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/route-sequencer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/route-sequencer-test.js should pass jshint.');\n  });\n});","define('affinity-engine-web/tests/utils/markdown-it-highlight.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/markdown-it-highlight.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/markdown-it-highlight.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('affinity-engine-web/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingstrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjjjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}